import telebot
import robot

TOKEN = '1346716396:AAGuyz5kFdw62HlmuzeXP7vuAo34vbNkcbA'
bot = telebot.TeleBot(TOKEN)

# –¶–∏—Ñ—Ä–æ–≤—ã–µ –≤—ã—Ö–æ–¥—ã
keys = [telebot.types.InlineKeyboardButton('', callback_data='')]*16
# –í—ã—Ö–æ–¥—ã –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
buttons = [telebot.types.InlineKeyboardButton('', callback_data='')]*2
condition = robot.get_input()

# –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω—É–∂–¥:
def generateKeyboard(act, i = 0):
    newKeyboard = telebot.types.InlineKeyboardMarkup()
    # Clear - —á–∏—Å—Ç–∞—è –∫–ª–∞–≤–∏—Ç—É—Ä–∞
    if act == 'Clear':
        for i in range(16):
            keys[i] = telebot.types.InlineKeyboardButton(str(i)+')‚ö™', callback_data=str(i))
            condition[i] = False
    # On/Off - –≤–∫–ª—é—á–µ–Ω–∏–µ/–≤—ã–∫–ª—é—á–µ–Ω–∏–µ i–π –∫–Ω–æ–ø–∫–∏
    if act == 'On':
        keys[i] = telebot.types.InlineKeyboardButton(str(i)+')üîµ', callback_data='-' + str(i))
        condition[i] = True
    if act == 'Off':
        keys[i] = telebot.types.InlineKeyboardButton(str(i)+')‚ö™', callback_data=str(i))
        condition[i] = False
    # Now - —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
    if act == 'Now':
        value = robot.get_input()
        for i in range(16):
            if not value[i]:
                keys[i] = telebot.types.InlineKeyboardButton(str(i) + ')‚ö™', callback_data=str(i))
            else:
                keys[i] = telebot.types.InlineKeyboardButton(str(i) + ')üîµ', callback_data='-' + str(i))
    # Back - –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –º–µ–Ω—é
    if act == 'Back':
        newKeyboard.row(
            telebot.types.InlineKeyboardButton('–°–æ—Å—Ç–æ—è–Ω–∏—è', callback_data='get-input'),
            telebot.types.InlineKeyboardButton('–ó–∞–¥–∞—Ç—å –≤—ã—Ö–æ–¥—ã', callback_data='set-output'),
        )
        return newKeyboard

    newKeyboard = telebot.types.InlineKeyboardMarkup()
    newKeyboard.row(
        keys[0], keys[1], keys[2], keys[3]
    )
    newKeyboard.row(
        keys[4], keys[5], keys[6], keys[7]
    )
    newKeyboard.row(
        keys[8], keys[9], keys[10], keys[11]
    )
    newKeyboard.row(
        keys[12], keys[13], keys[14], keys[15]
    )
    newKeyboard.row(
        telebot.types.InlineKeyboardButton('–û—á–∏—Å—Ç–∏—Ç—å', callback_data='Clear'),
        telebot.types.InlineKeyboardButton('–û–±–Ω–æ–≤–∏—Ç—å', callback_data='Update'),
        telebot.types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='Back')
    )
    return newKeyboard


@bot.message_handler(commands=["start"])
def start(message):
    bot.send_message(message.chat.id, '–ó–∞–ø—É—Å—Ç–∏–ª–∏—Å—å', reply_markup=generateKeyboard('Back'))

@bot.callback_query_handler(func=lambda call: True)
def ans(call):
    # –°–æ—Å—Ç–æ—è–Ω–∏—è –≤—Ö–æ–¥–æ–≤
    if call.data == 'get-input':
        ansver = robot.get_input()
        for i in range(16):
            send = str(i) + ') '
            if ansver[i]:
                send += 'üîµ'
            else:
                send += '‚ö™'
            bot.send_message(call.message.chat.id, send)

    # –°–æ—Å—Ç–æ—è–Ω–∏—è –≤—ã—Ö–æ–¥–æ–≤
    if call.data == 'set-output':
        bot.send_message(call.message.chat.id, '–°–æ—Å—Ç–æ—è–Ω–∏—è: ', reply_markup=generateKeyboard('Now'))
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ù–∞–∑–∞–¥
    if call.data == 'Back':
        bot.edit_message_text(text='–ú–µ–Ω—é',chat_id=call.from_user.id, message_id=call.message.message_id)
        bot.edit_message_reply_markup(call.from_user.id, call.message.message_id,
                                      reply_markup=generateKeyboard('Back'))
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    if call.data == 'Update':
        try:
            bot.edit_message_reply_markup(call.from_user.id, call.message.message_id,
                                            reply_markup=generateKeyboard('Now'))
        except:
            bot.send_message(call.from_user.id, '–°–æ—Å—Ç–æ—è–Ω–∏—è —Å–≤–µ–∂–∏–µ')


    # –í—Å—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –∫–Ω–æ–ø–æ–∫ —Ü–∏—Ñ—Ä–æ–≤—ã—Ö –≤—ã—Ö–æ–¥–æ–≤
    for i in range(16):
        if call.data == str(i):
            robot.set_output(i)
            bot.edit_message_reply_markup(call.from_user.id, call.message.message_id,
                                          reply_markup=generateKeyboard('On', i))
        elif call.data == '-' + str(i):
            robot.set_output(i)
            bot.edit_message_reply_markup(call.from_user.id, call.message.message_id,
                                          reply_markup=generateKeyboard('Off', i))
        else:
            pass
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–Ω–ø–∫–∏ –û—á–∏—Å—Ç–∏—Ç—å
    if call.data == 'Clear':
        try:
            bot.edit_message_reply_markup(call.from_user.id, call.message.message_id,
                                          reply_markup=generateKeyboard('Clear'))
            robot.set_output(-1)
        except:
            bot.send_message(call.from_user.id, '–ù–∏—á–µ–≥–æ –Ω–µ –≥–æ—Ä–∏—Ç')

@bot.message_handler(content_types=['text'])
def send(message):
    bot.send_message(message.chat.id, '–í–∫–ª—é—á—ë–Ω')

bot.polling(none_stop=True)
